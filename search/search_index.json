{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Aleff Aleff provides automated fetching and renewing of Let's Encrypt certificates for services registered in Consul and served via Fabio . This architecture is common with Nomad and adding SSL is simply a matter of deploying the Aleff job . By detecting urlprefix- (configurable) tags on services registered with Consul and extracting the domain names, Aleff will request or renew SSL certificates as required. The certificates are then stored in Consul in the format required by Fabio's Consul-based certificate store. Note that Aleff currently only supports provisioning certificates for publicly-available domains; it does not support requesting certificates for internal services. This may be added as a feature in a future release. Features Easy deployment using official docker images. Fully automated; deploy and forget. Not tied to Nomad, compatible with any Consul/Fabio setup assuming you can configure the routing appropriately. Where should I go next? Nomad quickstart : Get started with Nomad Technical architecture : Read about the technical architecture","title":"Welcome to Aleff"},{"location":"#welcome-to-aleff","text":"Aleff provides automated fetching and renewing of Let's Encrypt certificates for services registered in Consul and served via Fabio . This architecture is common with Nomad and adding SSL is simply a matter of deploying the Aleff job . By detecting urlprefix- (configurable) tags on services registered with Consul and extracting the domain names, Aleff will request or renew SSL certificates as required. The certificates are then stored in Consul in the format required by Fabio's Consul-based certificate store. Note that Aleff currently only supports provisioning certificates for publicly-available domains; it does not support requesting certificates for internal services. This may be added as a feature in a future release.","title":"Welcome to Aleff"},{"location":"#features","text":"Easy deployment using official docker images. Fully automated; deploy and forget. Not tied to Nomad, compatible with any Consul/Fabio setup assuming you can configure the routing appropriately.","title":"Features"},{"location":"#where-should-i-go-next","text":"Nomad quickstart : Get started with Nomad Technical architecture : Read about the technical architecture","title":"Where should I go next?"},{"location":"nomad-quickstart/","text":"Deploy to Nomad Aleff was designed specifically for this architecture so it's the easiest confguration to deploy. Requirements Nomad configured to register services with Consul. Fabio deployed to proxy HTTP access to the services, listening on both port 80 and port 443 . Services with urlprefix- (or similar) tags specifying domain-based routing for Fabio. The main aleff processor job requires access to both Consul and Nomad , and the aleff-challenge-responder job requires access to Consul . For more details see the technical architecture section . Run frequency Whether you use an external timer or the internal timer (see below) it's important to think about the best interval to use. Once certificates have been initially obtained the ideal frequency is daily. However, new domains added will then take up to a day to be detected and SSL-enabled. If this is too long you can always force an execution of the job when you add a new domain via the Nomad API or UI. Deployment options Aleff can be deployed as either a periodic batch job or a long-running service. The container itself has a very small footprint, only requiring 8Mhz of CPU and 16MB of memory. The only advantage to running as a batch job is that you can set the Docker image to force_pull = true with the latest tag to automatically use the latest stable release on each execution. Deploy as a periodic batch job Deploy as a service job","title":"Deploy with Nomad"},{"location":"nomad-quickstart/#deploy-to-nomad","text":"Aleff was designed specifically for this architecture so it's the easiest confguration to deploy.","title":"Deploy to Nomad"},{"location":"nomad-quickstart/#requirements","text":"Nomad configured to register services with Consul. Fabio deployed to proxy HTTP access to the services, listening on both port 80 and port 443 . Services with urlprefix- (or similar) tags specifying domain-based routing for Fabio. The main aleff processor job requires access to both Consul and Nomad , and the aleff-challenge-responder job requires access to Consul . For more details see the technical architecture section .","title":"Requirements"},{"location":"nomad-quickstart/#run-frequency","text":"Whether you use an external timer or the internal timer (see below) it's important to think about the best interval to use. Once certificates have been initially obtained the ideal frequency is daily. However, new domains added will then take up to a day to be detected and SSL-enabled. If this is too long you can always force an execution of the job when you add a new domain via the Nomad API or UI.","title":"Run frequency"},{"location":"nomad-quickstart/#deployment-options","text":"Aleff can be deployed as either a periodic batch job or a long-running service. The container itself has a very small footprint, only requiring 8Mhz of CPU and 16MB of memory. The only advantage to running as a batch job is that you can set the Docker image to force_pull = true with the latest tag to automatically use the latest stable release on each execution. Deploy as a periodic batch job Deploy as a service job","title":"Deployment options"},{"location":"nomad-quickstart/batch/","text":"Deploy as a Periodic Batch Job Using the example batch job definition (embedded below) as a starting point, make the changes required to match your target cluster. Don't forget to change both the main job and the aleff-challenge-responder job, which is embedded as a template.","title":"Deploy as a Periodic Batch Job"},{"location":"nomad-quickstart/batch/#deploy-as-a-periodic-batch-job","text":"Using the example batch job definition (embedded below) as a starting point, make the changes required to match your target cluster. Don't forget to change both the main job and the aleff-challenge-responder job, which is embedded as a template.","title":"Deploy as a Periodic Batch Job"},{"location":"nomad-quickstart/service/","text":"Deploy as a Service Using the example service job definition (embedded below) as a starting point, make the changes required to match your target cluster. Don't forget to change both the main job and the aleff-challenge-responder job, which is embedded as a template.","title":"Deploy as a Service Job"},{"location":"nomad-quickstart/service/#deploy-as-a-service","text":"Using the example service job definition (embedded below) as a starting point, make the changes required to match your target cluster. Don't forget to change both the main job and the aleff-challenge-responder job, which is embedded as a template.","title":"Deploy as a Service"},{"location":"technical-architecture/","text":"Overview Aleff comprises two components and some configuration.","title":"Overview"},{"location":"technical-architecture/#overview","text":"Aleff comprises two components and some configuration.","title":"Overview"},{"location":"technical-architecture/aleff-challenge-responder/","text":"Aleff Challenge Responder View the project on GitHub and DockerHub . All requests via Fabio to /.well-known/acme-challenge/ must be routed to this component so the correct response is given to Let's Encrypt's HTTP-01 challenge requests. In a Nomad-based deployment this will be handled automatically. Access requirements Consul All data is stored in Consul. Fabio will need read access to the active certs key in the configuration . The Consul API URL and token (if required) should be provided in the Fabio certificate store configueration . We strongly recommend the token is provisioned using Vault .","title":"Aleff Challenge Responder"},{"location":"technical-architecture/aleff-challenge-responder/#aleff-challenge-responder","text":"View the project on GitHub and DockerHub . All requests via Fabio to /.well-known/acme-challenge/ must be routed to this component so the correct response is given to Let's Encrypt's HTTP-01 challenge requests. In a Nomad-based deployment this will be handled automatically.","title":"Aleff Challenge Responder"},{"location":"technical-architecture/aleff-challenge-responder/#access-requirements","text":"","title":"Access requirements"},{"location":"technical-architecture/aleff-challenge-responder/#consul","text":"All data is stored in Consul. Fabio will need read access to the active certs key in the configuration . The Consul API URL and token (if required) should be provided in the Fabio certificate store configueration . We strongly recommend the token is provisioned using Vault .","title":"Consul"},{"location":"technical-architecture/aleff-processor/","text":"Aleff Processor View the project on GitHub and DockerHub . Detects domains from urlprefix- (configurable) tags on services registered with Consul. For each one it will check to see if a certificate already exists. If not it will request a new one from Let's Encrypt. If it does it will check the expiry date and will renew if it's within the configured RENEW_WITHIN period. Use the internal timer The processor can be executed as a long-running service which checks for new and renewable domains based on an internal timer. Set the RUN_INTERVAL environment variable to a positive duration to enable this feature. The processor will run forever. Use an external timer By default the RUN_INTERVAL environment variable is set to 0 . In this mode Aleff will run once and exit. Run this periodically using an external timer such as crond , systemd , or as a periodic Nomad batch job. Access requirements Consul All data is stored in Consul. Aleff will need read/write access to the keys in the configuration . The Consul API URL and token (if required) should be provided in standard environment variables. We strongly recommend the token is provisioned using Vault . Nomad Aleff requires the ability to launch the aleff-challenge-responder service. The Nomad API URL and token (if required) should be provided in the standard environment variables. We strongly recommend the token is provisioned using Vault .","title":"Aleff Processor"},{"location":"technical-architecture/aleff-processor/#aleff-processor","text":"View the project on GitHub and DockerHub . Detects domains from urlprefix- (configurable) tags on services registered with Consul. For each one it will check to see if a certificate already exists. If not it will request a new one from Let's Encrypt. If it does it will check the expiry date and will renew if it's within the configured RENEW_WITHIN period.","title":"Aleff Processor"},{"location":"technical-architecture/aleff-processor/#use-the-internal-timer","text":"The processor can be executed as a long-running service which checks for new and renewable domains based on an internal timer. Set the RUN_INTERVAL environment variable to a positive duration to enable this feature. The processor will run forever.","title":"Use the internal timer"},{"location":"technical-architecture/aleff-processor/#use-an-external-timer","text":"By default the RUN_INTERVAL environment variable is set to 0 . In this mode Aleff will run once and exit. Run this periodically using an external timer such as crond , systemd , or as a periodic Nomad batch job.","title":"Use an external timer"},{"location":"technical-architecture/aleff-processor/#access-requirements","text":"","title":"Access requirements"},{"location":"technical-architecture/aleff-processor/#consul","text":"All data is stored in Consul. Aleff will need read/write access to the keys in the configuration . The Consul API URL and token (if required) should be provided in standard environment variables. We strongly recommend the token is provisioned using Vault .","title":"Consul"},{"location":"technical-architecture/aleff-processor/#nomad","text":"Aleff requires the ability to launch the aleff-challenge-responder service. The Nomad API URL and token (if required) should be provided in the standard environment variables. We strongly recommend the token is provisioned using Vault .","title":"Nomad"},{"location":"technical-architecture/configuration/","text":"Configuration Aleff is configured through environment variables. DEFAULT Set this to disabled to prevent aleff from obtaining certificates for all domains by default. Default: enabled When set to enabled you can disable aleff for a service by adding the tag aleff-disabled . When set to disabled you can enable aleff for a service by adding the tag aleff-enabled . EMAIL_ADDRESS Specify an email address at which you want to receive expiration notifications in case Aleff fails to renew a certificate. As of writing this documentation they do this 20 days before expiry giving you plenty of time to diagnose and fix the problem. While Let's Encrypt allows certificates to be requested without an email address Aleff requires one to ensure you are aware if renewal is failing. Default: none (required) CHALLENGE_RESPONDER_JOB_FILENAME This is the filename of the aleff-challenge-responder service job definition. Default: none (required) RUN_INTERVAL This variable defines how frequently Aleff should check for new domains and domains to renew. Valid intervals consist of a positive number followed by a units suffix. Valid units are h , m and s . Examples: * 5m * 1h * 1h30m * 24h If this variable is set to 0 Aleff will run once and exit. Default: 0 RENEW_WITHIN This variable defines how long before expiry a certificate will be renewed. It has the same syntax as RUN_INTERVAL . Note that the default is based on Let's Encrypt recommendations . Default: 696h (29 days) DISABLE_CHALLENGE_RESPONDER_JOB Set this to any non-empty value to disable launching the challenge responder job as part of obtaining a certificate. Use this if you're permanently running the challenge responder. Default: \"\" (empty string) CHALLENGE_RESPONDER_JOB_TIMEOUT Specifies how long aleff will wait for the challenge responder job to start responding correctly to the challenge request. Uses the same duration semantics as RUN_INTERVAL . Default: 1m (1 minute) TAG_PREFIX If you're using a non-standard prefix for Fabio routing tags, specify it here. Default: urlprefix- Consul KeyValue keys Aleff stores everything it needs in Consul and the location of this data can be modified through several environment variables. See the Consul Layout page for details.","title":"Configuration"},{"location":"technical-architecture/configuration/#configuration","text":"Aleff is configured through environment variables.","title":"Configuration"},{"location":"technical-architecture/configuration/#default","text":"Set this to disabled to prevent aleff from obtaining certificates for all domains by default. Default: enabled When set to enabled you can disable aleff for a service by adding the tag aleff-disabled . When set to disabled you can enable aleff for a service by adding the tag aleff-enabled .","title":"DEFAULT"},{"location":"technical-architecture/configuration/#email_address","text":"Specify an email address at which you want to receive expiration notifications in case Aleff fails to renew a certificate. As of writing this documentation they do this 20 days before expiry giving you plenty of time to diagnose and fix the problem. While Let's Encrypt allows certificates to be requested without an email address Aleff requires one to ensure you are aware if renewal is failing. Default: none (required)","title":"EMAIL_ADDRESS"},{"location":"technical-architecture/configuration/#challenge_responder_job_filename","text":"This is the filename of the aleff-challenge-responder service job definition. Default: none (required)","title":"CHALLENGE_RESPONDER_JOB_FILENAME"},{"location":"technical-architecture/configuration/#run_interval","text":"This variable defines how frequently Aleff should check for new domains and domains to renew. Valid intervals consist of a positive number followed by a units suffix. Valid units are h , m and s . Examples: * 5m * 1h * 1h30m * 24h If this variable is set to 0 Aleff will run once and exit. Default: 0","title":"RUN_INTERVAL"},{"location":"technical-architecture/configuration/#renew_within","text":"This variable defines how long before expiry a certificate will be renewed. It has the same syntax as RUN_INTERVAL . Note that the default is based on Let's Encrypt recommendations . Default: 696h (29 days)","title":"RENEW_WITHIN"},{"location":"technical-architecture/configuration/#disable_challenge_responder_job","text":"Set this to any non-empty value to disable launching the challenge responder job as part of obtaining a certificate. Use this if you're permanently running the challenge responder. Default: \"\" (empty string)","title":"DISABLE_CHALLENGE_RESPONDER_JOB"},{"location":"technical-architecture/configuration/#challenge_responder_job_timeout","text":"Specifies how long aleff will wait for the challenge responder job to start responding correctly to the challenge request. Uses the same duration semantics as RUN_INTERVAL . Default: 1m (1 minute)","title":"CHALLENGE_RESPONDER_JOB_TIMEOUT"},{"location":"technical-architecture/configuration/#tag_prefix","text":"If you're using a non-standard prefix for Fabio routing tags, specify it here. Default: urlprefix-","title":"TAG_PREFIX"},{"location":"technical-architecture/configuration/#consul-keyvalue-keys","text":"Aleff stores everything it needs in Consul and the location of this data can be modified through several environment variables. See the Consul Layout page for details.","title":"Consul KeyValue keys"},{"location":"technical-architecture/consul-kv-layout/","text":"Consul KeyValue Layout Aleff stores everything it needs in Consul. The location of each type of data is configurable through environment variables. Unless you are already using the certs/ root key you can safely use the defaults. Configuration KV_CONFIG_ROOT The private key and user registration information for Let's Encrypt is stored here. The keys include the ACME directory URL and the email address allowing both to be modified without trampling on each other. It also allows multiple instances of Aleff to be run with different configurations using the same Consul instance. Default: certs/config Challenge tokens KV_CHALLENGE_ROOT The domain verification process involves responding to an HTTP request from Let's Encrypt with a token. The token is temporarily stored in this location in Consul. The aleff-challenge-responder has a matching environment variable from which it will read the token to respond to the request when it comes in. Default: certs/challenges Certificates KV_CERT_ROOT Certificates that have been obtained from Let's Encrypt are stored here in such a way that Fabio can be configured to use this location as a certificate store. Each certificate will store two keys here: <domain>-key.pem and <domain>-cert.pem . Default: certs/active","title":"Consul KeyValue Layout"},{"location":"technical-architecture/consul-kv-layout/#consul-keyvalue-layout","text":"Aleff stores everything it needs in Consul. The location of each type of data is configurable through environment variables. Unless you are already using the certs/ root key you can safely use the defaults.","title":"Consul KeyValue Layout"},{"location":"technical-architecture/consul-kv-layout/#configuration","text":"KV_CONFIG_ROOT The private key and user registration information for Let's Encrypt is stored here. The keys include the ACME directory URL and the email address allowing both to be modified without trampling on each other. It also allows multiple instances of Aleff to be run with different configurations using the same Consul instance. Default: certs/config","title":"Configuration"},{"location":"technical-architecture/consul-kv-layout/#challenge-tokens","text":"KV_CHALLENGE_ROOT The domain verification process involves responding to an HTTP request from Let's Encrypt with a token. The token is temporarily stored in this location in Consul. The aleff-challenge-responder has a matching environment variable from which it will read the token to respond to the request when it comes in. Default: certs/challenges","title":"Challenge tokens"},{"location":"technical-architecture/consul-kv-layout/#certificates","text":"KV_CERT_ROOT Certificates that have been obtained from Let's Encrypt are stored here in such a way that Fabio can be configured to use this location as a certificate store. Each certificate will store two keys here: <domain>-key.pem and <domain>-cert.pem . Default: certs/active","title":"Certificates"},{"location":"technical-architecture/domain-verification-process/","text":"Domain Verification Process Aleff uses the HTTP-01 verification method. The verification key and token are stored in Consul for the duration of the verification process. The aleff-challenge-responder component receives the verification request, looks up the key in Consul and returns the token stored there. Once the verification process is complete the key is removed from Consul. Note that verification takes place over a non-SSL connection on port 80 .","title":"Domain Verification Process"},{"location":"technical-architecture/domain-verification-process/#domain-verification-process","text":"Aleff uses the HTTP-01 verification method. The verification key and token are stored in Consul for the duration of the verification process. The aleff-challenge-responder component receives the verification request, looks up the key in Consul and returns the token stored there. Once the verification process is complete the key is removed from Consul. Note that verification takes place over a non-SSL connection on port 80 .","title":"Domain Verification Process"},{"location":"technical-architecture/fabio-configuration/","text":"Fabio Configuration To configure Fabio to use the certificates obtained by Aleff is simply a case of pointing it at the right key in Consul. With the default Aleff configuration this line is all that's required to configure Fabio: proxy.addr = :80;proto=http,:443;cs=consul proxy.cs = cs=consul;type=consul;cert=http://127.0.0.1:8500/v1/kv/certs/active If you've changed the KV_CERT_ROOT option you'll need to adjust the Consul URL accordingly. For further details on configuring Fabio certificate stores, including how to provide an ACL token, see the Fabio documentation .","title":"Fabio Configuration"},{"location":"technical-architecture/fabio-configuration/#fabio-configuration","text":"To configure Fabio to use the certificates obtained by Aleff is simply a case of pointing it at the right key in Consul. With the default Aleff configuration this line is all that's required to configure Fabio: proxy.addr = :80;proto=http,:443;cs=consul proxy.cs = cs=consul;type=consul;cert=http://127.0.0.1:8500/v1/kv/certs/active If you've changed the KV_CERT_ROOT option you'll need to adjust the Consul URL accordingly. For further details on configuring Fabio certificate stores, including how to provide an ACL token, see the Fabio documentation .","title":"Fabio Configuration"},{"location":"technical-architecture/testing/","text":"Testing The Let's Encrypt API has a staging environment that can be used for testing. To use this in your deployment set the environment variable ACME_DIR_URL to the staging URL on the page in the link above.","title":"Testing"},{"location":"technical-architecture/testing/#testing","text":"The Let's Encrypt API has a staging environment that can be used for testing. To use this in your deployment set the environment variable ACME_DIR_URL to the staging URL on the page in the link above.","title":"Testing"}]}